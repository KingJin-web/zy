

#抽奖没有授权的话，手动进小程序抽一次就行了
#环境变量 export dadaming_jj= token（去掉 "JYJwx " 前缀）
import sys
import zlib
import base64
import marshal
import hashlib
from itertools import cycle


from itertools import cycle

def custom_decode(data, salt='hTeD4gMOd1nycmkV', magic=1234):
    result = bytearray()
    for b, salt_char in zip(data, cycle(salt.encode())):
        result.append((b - salt_char - magic) % 256)
    return bytes(result)


def decrypt(data='vH;AGVFe2LtKmQDsHF=49qMX}h+l}YLa<AZXLE&e-b#PC^xI?pepGi=;)BOui{gMdOTzO;$;E}{S47!Jzat+QbIC!Trs9(8vM%6HQpWff5={qeC~07Gg(K!-0T-{btVU^ap>ETspuWhX=i?42+&GsT2=qQG>AvD+0-e^XEgtxrkpJY!lY9J=nNpR~ahOeiU@{b<|B5nYAG<MNftZ*O5wcb~U@p8PqZcvTnKR%7G5ybJr#&GvE2S$E?sgv4E&tFBbinK<ER&uF?9M?N2%gvRPyMzh+93X!DfkzB24VittGvypI0*7(-5?HNGhhcAL^y1RGF7&W^_bi7)R-r_v>*H*?U4@E3*-<LH3dCOF`->&xsUVhm8cm`=JdlyASNqo=`HWQg)8i!GK0Uy^ZfPZG6T--Z8&OO_5Lz4x`j*)xEsRJ*ATtG+)^LNv%NRv(ipAQ?K&479H`}m73y?X_^b7gJQrJRrNJ`8i0ZNs<-{%k$1dnd)qgr7R8x8<nqF}W-Iz!V;HKWfJZU$z?V*o9u(c<cG`h;+V2aakw-Le-b(qU|vXehROpd%6E)NPNMN?hxHS0gCH0J%EcqGLJ!#3V*wL(0C3I5_{HFF~gW&d6rP67#TlzluBXO<`Xp)ho4tQa*Iur9sjGq52tb1pv`VEZyVt6fW%+eGyYd;zu)c3MsfC8r#uGE2jqb#=|%v(XC*dNd~c*`+I^^|ur-^!+=kFaqqQ6dwqkCAOFWH5EQ0lsSy&H^sIQ_bk$|yrO?IyaEhoRwO6u_9+x7?f<0~tu&B3BxCl;^dS1QDCIWy@%#E9EE1!&g`YV9we&aU4Gs(qF@-e~B1j&ZE7G1vp#|($2Az|gwKRSjPm(ez1d2P)2_(LCNHQHD1B0)6GVZ+b_C@UtO-M{18V-%Q<U7pgUJb%0wdftU()v8AGZC<d#-p?a1*xbQJ=MRHb9{0a2ba#z0A3%n2nkTmu$_UsU(A$M;st>lsAD4RIBW1*lg@sIYtK=%uFH~@u<<2FTDTJkJ#j`oO=xX?*71{N;yX;qG!2$y$>mOtu_v_H6xK<J2dSlrtfty#S|p~hrMRUGrel11{?km_78bI;s}&NwbPOiki}2|FGP%g{9*3%7Vw`--fGA4M5GvJ-0ME>fr<4}r%8^<UP}Km{&GtH^tF+PCk_&~objFfD)R3a<Ehs{T+filk2Yj)2af$5$T<-&8!Fqv*5_)4^(lOS*HdueQXFP4Pfn8*+$S8xUy|jXR5*68C5iY4;gkg<+nfb8Y?5Ct~xr<Qr`oSB<k3nj2<;h1f<@fD{m5=`fDsu#^e?FB_h2_Zha8LQRR-l5%F?X&x-fVjZFKG|?P=DC;I#JDiqP6Q9e88B=!r<Tb%T_c#U{ZrTHEi%ebgphM4xu<mUQf&_Zji3~(oS?UYoFq;LTvIQj6DxMiebs}EM?AcJhtVfialr5<;6|*T#ioPZa^eJ@V&c1Pl89t<2=`lUJ6(sw%xCYa5GWfH`kF}b5h6zRAnZMMPWXe^tnm4965Sw2=Rr|Qo$>DmAHF|dHWKg&&*aIA@FQS{kGX6b8hwet}RXtZNZE-@M+A|s35|DHCiC$Sb(f)gH`c9F`eMnV>;pfo6n?~IVQdDKG+K@r~JDP9}}T8r%ZHCN$d<jW91=D-T95uEcPU)xB<iZ7R;~%!r$+lVU;SJ)^z0<#d7}n3=D#g2fq0@1GJ%i4E+(K<rS8j%ATx+7>aV;=1c`Y43lHFfq9|vaye&-t<M7e7-^HPq?#j~^}*MCK-oRHQ8dHV2JhhInzP$e4fsUB`m%L_DGRmblJL06<Tn(FS#&0CzA(F#rKIV=2kzh-?hPme!A`ZKbDc4<LObE}M`)^A-&wDF1T5+>#@<SjCEPe}kX+Z-%tOPd%+{C9I4UCUtqr<X@zZIfarND}0o`S~w@PlJCZcTP+1>Q1ICnHq3q-fiCPYbsx~GM^_?t}6kBp>n3W*~PN9`4}47)R&pTNjcoK5t$^}q~dp%6(mtnT{U<Mu=ok}UZ@8A`T)OKcqc>(Y{zO8_`1<MoX8EEQuq#t6H#abFXzv}np7w1say@*HW}Hiz76_o#`Ydw8iLduHw}YTyec4{*?1df(=)!EVHSbWmz;b1=6b(n6-yLJKjU*Y9)m5zoa<*Y0|wKvtsROHu$6IFK?II}$ZDllw$Qa|gYQmj|1jg%^n!j)Ai^Y^u;Rli9i4J!K1gTsK6-RAU2%L8|J^ta7;sqlVt*FYYZn$OJI_V)z)yu=W`S_jq>Twppcpe7vy&gJmnBBFB(`%MBQnwBxN%WppZDcKyvH=s^f%8106-V0T+hkcTk#GVhS`#uddlwpD&%KJ-BCqpxMB_CvZ*M_QUL)_WOD7I>y;DpfLQr}VJj1-H6&?C}6rs8$=b4ah&W;CZxzCGhEtV?l@FTw#Li(Fyx=oS^)4mrffNIl~il_$&J_gnd1bOmwmL564dcS0`L7pMs9+uKb<A(Hj1bTfKZ*?6Xm}Fl+z1;_;`+xX#@`=OxWLYv)24HF}4&5$RRy!QWAY&xBlZWZiyN&18M&Qa?7P-qEhyP8CWdqk8-Z*FT_3w8n{2g(7n~chKpoL9~ihajLh`>}l{>QtsO1G>L+C`c9!H_K48BejWSWvYJMYN@XLAkXoM`jj6&VtPCiQT9#J7h}%UzL4PY4hD6ejY?sZ8>SaZN2D7c_RNWUmymCe$t?iX-(HXLD9i8(lp#F=y>mkN!tH&b|QEXrwoZCtdWwHzcKy;SjRxDdTMZe^Bs;=KwaoQI|8jPtr1^a~~PHhHk(L;9_nkvdxp@{9JnS|%^I)VsHJSF{}8?W7`kzVP0^<<8-vVgYaq&gnKZL2-*v2-ZRv<e}HgO<h=TzV;8%fF0?Pb`x%7zP<4Z#*})(!r{Dj-R-!J^3oLymODVtlpWue{zdQ@Y>J_{EelNVo{rh<XijSsI81E;<1JHED`NHc#wx#bS$P9EFUf4f`lI8zj%@c>Cc?ugBqHZr9nWl?Q<G~2YFflkw@_vve7QFv#0XIXxRBVf~={4v0W#>;$X)_loyXTsTY39vsk7A7^`gY_6_E?0e$ikJpJdCvncdd6YlQko0Wjuj2V$Kqs&idod{-V>g`IM0lRW4gvC7GpuA?=NWsIN?A8|<=b6A-uf%v}VYNa%Ze5}w+ZFt(0w_=B(JuCuYTO^JlKt{L?TUML?2J-!7bghc6b=K&g31g}TyqmU<u};~sJ7%5aM?5h7pEG~@9152+o{6HH^#*W6UZRG)9r2R=Y?I_0%W`CJ|wbs*o-5@Uv>Htw}Q@6@(oY;dc$-)_qLRyy2{pl(11{*M7f|y+NeZ)x{ze3C`adk1;}SG!Fuw4q-Tl|lb<*P0vR1@=o42Lfb4Oso?l7*J}0>`5oU%x-TUnO#f>ns$}$GsOmJ1SOp999Dzo2vt{$%!K_JP#V}2jkz?t0Eb2rJ?OYfafo0;M&;KOb+ocSe&Qw*4M@=Hc(1<HOC?7qs9a~dDJ5DpvQh}!eg@qPl}c~m02u8+mB47u9vN%z^-cx6tTs-=hH0$Z5VtFgq))xaM#<^++DKqq3$rhIb`URXHaLd1YlMJo`>3RRk|E|@%0l&Zk@{{7^wE#vCiw^Yk7=vv_l0xs8oAEXerLoA=zQ0TjyDkJWhI()l{7polTWN;QTNKA%OBkarn9-=p1i(9_r16|1L3X>F*AJbLAVltVf9%GEHoA#M$?VNM~VrD!f8%xe)q1{7>t8XT}VB(GR|D!^eKb`RlMpqX4lrk-iw!Cv15E8{x22EE#)9}Vdqn*J*_bBiefY5A5P6)=DLh4twSTK%7bs8V@(y$`fy8)F<n7q8y*k?4@99f07;GA7YzzAu5vLNO4D7Sg(10-z!l2Uaa^(@EMtZiZ+?%sNe7p~MOP-eV7kifQ-Jj&S7Ce86)r6(xG#8S>^kK0wv5Z-?N+O3;?o2d|Q!Zr7q`0&F@^~*<bjOY8s=#~Fj7SFhJGfM80!6Woxu1KpAnEYZGL6|*l-pM5e-Uq|qrqS+s`-2(x<L++({DY|Vx|iVY@-3>~l5yKM@HT_zhxE@!+`(*l6N+j8rWy6v(F|YUAMsY>ID0Pu>7j8s;~*C@degRy@n5c3ks%S`+Z`83s}!!`be>D(xIpRdLV#V$!{AXE!Q`ACxDBF4n&bV{5)RcJD>d3ve`#tCKu{$E{~gpi$u1-JIRvNj-nwke+0=P84}`9^+(;FS>x{hp>)MVgCsb@F;R?cq_};&GDaeR~imKmYtQWIGh4RwkJW)2S1TlimqPn%!rL`d6bP)Gilu(>G7=ia25+52EM^aOTtdJDw89Mfob$8K0YvV8!@T?OrRj|U*gs{=h&tIYyq~3X(miRF+x@UbP*b`BGgDUebwy{L7kVvI_zm#-<+}|1i^&A;`lMj6RQrlm#;g{S4h|nXxonIk_Sdg!{e{tLKKDb1xur&qVMZc6K9gH=!J741Z0~G+>sOk@d&0on@u{qnyx5<L?1AK8ID@Ma@J0um-K)l_-Bh=$GRzdZ7nc;+MzSf-y`>oG$nPhjYQTY~98}#ywsTu)Ti--Ay=GUj;-ZrliW@>HMkw5bliV3AG@<Ch6aO>@T)hRi-2aJ5wZeS?!Y3lc_NjFA6JLnn-uD~5ICyR%`?KI}e>}slE)#3%xS8BF;iwS(#qcl%ruYX{DFSo3;SGu1kQCc*s;Q=1GVg+k2IOGrd3JJ*{=xNt-S0b%@PwOh|%!_H(_49uQF?XK@{hjHVoPf5<VGzIoH|&6}knIwmk6rU^Or5I1HaV#U`q?3WMk8rrp97DGTNLobQ=tmx_oI{s-@V4`5J<J&PKA))24y2U)h7*sz@=C&3FwHZA7qF1oK%(L+F>aA<S6p5Mg7!77XZ}x`=K-l0h_799fj{VDGNlExkHDKlrsR>^p;;BcnbZQgtz;x=w=FrNR)GjkUVgDF=Q2nq<A${yj>Y`czA%L<^4L0(mR+hn2_`eb$X_IG|F#I3&`71X`*mTP|BQf$jyLB0DN%%pl=XW#%?aBrm#*JBJgzM?0+korcK!@xK(==daRY3!EvTrn)6-XdJHFM2h)sr3J?$KE|<Lk7`<M8+69G-zvK#(<lej>Q<?g;{`l;$>I@1E)&q29=?mHJ2L)82U6YxH>k9=mahthc()l`A999HYhg8p0@2Ds0-A)4V@c(oLVo;_v#OD-FP;6Z~;aJNx<fwXPse;uWoD0$*m+h2P70XrWjBtYjf|_?WK&%&1m1i=yeW(bFYVViL1&qrGH)9KKR<8C(^MgE;FWFdh8!O1X+D*ep7ibWlOd2!2m7H5VTPO3|Qp9^K{|q$GJSLmnKZ<cMy>QcZ%35;Y_mx~w&wcr8f8J~jp&+A*3ULj&Pu_yh`XicCKERqTJCYa#WY~jsBN<yvtHB006xkG<Ah2@w2#~Cc&`t8Ojh*vIo=@U-X%O|n@d8^<L&*<=iao2;%S^n>c`zcu2<(Cf5_bt^u`^sB$Q@?_<}lc)s8tiOZsAR8Ttmb^CA@Zo*lJ^Y;>ck>{Q?!_Y4n}AZkw|%j_!8U`g$t(kDnLd=w#eA;H-4<A-A`uMmzs^kCYL`LHvFH&@@Ov+?w;o$KsIQQ5UU68XK`q|HBd{(I@1a)2-bTfq|u!Hc;w8iPSCikQTiqwar;&%w|Df^hq|%Kq$E11a`FV4g%maos6c)w`V8E-Qj+!TL~gZOl8myGm(Zqo9_L&E7KLuvSW&Yv_PNqr}b}{#b56<H~WpR?BpUhWpgAFD3}HMEWP0524j(Trqc4k@qpW7Q-74(nb`A0FyTx*U<nOe$U!25C<FU**jZ0^gkwD<J%r_*+8D*`l0?gk?Y{&JF)~EFHe;(`$}aGhS!UwOkkQ==-;#u9-wJf5L(A@i%?h-qjXvQRNZM}fbPz#UE3WyKRov1tT=?rw016Gy2<#AP1&Z7EeWoP>NC^jXcX0I6I#G<a{SkA%V`?{C`=qC&PV`vk9B?EA-J69|?KP>43w~9%pEh2`)iehQVi)(WTfCNf+$&(xXmGSb<@M@lt37yWnx%GjDKmnuL@V_L3N{77Ds$s<D|v`z7yFCmT0MkyM`|0mJXt+%TLY`2uTAZ1_AJx-(=SO_?o<Bh!B(CUW2?K5>DHis364&3<XWlQZ%j;gcfx9|10FB!dmd<lx0zF<d^pMprg(O&{iF1HO#{iq2o<rbzhR7Wy#18~%NGzY#JE*&b1blM0`8em)08h$V}o3rW{^EY`#BXQ8m}T+8(nj&5YX|}2cDL0)T%e7-bYQ)14Xik1tA}2q9v16CP8(!`cvZSo84-YG3zRpoUL-$v6R=##<U?1ZI?hz%ae@kKNSH)hY)DZ#?;}sm;l3)xZuf-p~x|{OB3W3e?++4VXIr=cZCE7!=zs$uW5L$*XARaqz%T{DF54Xto!+1qiO|;dAOIPmzgr6CKk;$O)4*M*UAg$63+OQ3qvd2>5VR7JU$NTbHV-#7W6o8gos;x`j75r_X&pChs|{+0EURHd=cjST8s(5ae#I1)X;x0zSr|zx%Sq@{Z)x(^E~J^6+Tx|oRP-$M7YYrtytOy+g+OYqEBc1GT#r(C1=eSpZwT`WAhQlT`lA~<dfIKYOY?veeGe^EwFGt^iLJq<)E3EC@Cs_vVhg>*IuV83US9-Jk#@OPy*O&AQ?56!e=G?V{P%;;L2tSt{iq1`S|#0n>c<c+q#ue3wZU`w4fqXVdAhuH>au1+`7+OO$B<T(HZKF8b`2y+k&a46I~n*_i;!sC;9B^hi-%5A~eUZF?AU0byg%pu!n0Y%mZ;XE1`aF`LoS_fZ|Q~1KoyX%gqvzX1NJpiyH@wz=@}|qthGudl%EO+=Tj#;IDKQ!b$uc4lxA>Z7oAmohYs+%z>S)P)Iqs=kwj`*5I>RA9}dRBl_KaxI3bmPeHBTkwOkq)ldr_)&`f=?u@ccXsx=UU>wgcb11efJgkGj*sze%{g?jHI{D(JqSzav@m!K?D`)-C*4?Gn?uQyJv6_GtjZ)#_v!2UiW4^1#@c`OT`9XT?N4BRfKB~$YYYd^xQWBiz(P4q3CH<A;yxG8E6vc8cD)!#?okU7f4wx2HmskZ0)?128Oj68|kl#)d)>BeJ+r*T|6cpsYn3qg{xV!znr)U*{PdC<7^itS!NeWlVK|dF!^{Y^Q;7@2sjmna^m+<=UD{YL_TW}RWeeZ^A5eH8U`*7jkZc4HhkT2>16zB*6`&+LgfC8yn-JznD2b}!=O6<-E-f&9Dw7Z($QBXITyI!`T4@EMGUoTz$!<MmWtYw}ifH&;}*EQOFT_*-WCv2(VCM&N4sJ)QCQRXb`fLi^qpsnm$0CTA>ITEa*(cc#18v)ho{!bG`silQ9D&}MMYFiS|)?MfBNXbk)DzQicq>H<wyzvCAMBarnX(`V<s1YRkL6x^q%rblKMDiGfYFZ82n`kQQ%-`|{ve^Pw+!I6gT-ReMkzAb8f%WI~bJ~;Me*#$I1nCS!<D|v+t4(gQ?YmR;puUZs*cc~ht7m|>CYWb$wa3D)3r(WNl`Sd{FVUZSnB<w)bHd+JhY;yLVV#7-aWT|f1Ys(U5L+ywFBAOY;$nyp3eI)hj<lcefqc<_6hO&fxGiVqQE|C*hi%`jH5c1ur#)3>Zupj%>uR^nTTi{IA}Jjcn*rBD+Yl8EBlcVm&AprQ#;x6ov5w3q=ok8$X;-t>azX|*O;2m3til&00jqJ@hKT2Qx;T{5Wy89g1Y2|g<tO)z(446eh!_Hwmm*hMfa`O1|Lij?{iBrE%EtqalOKJH4$}#tP({YWu=Spe#z7`tzr^c)oC^!a^-tcC(yDZr;)wk<we-;X0@k9W_syi%_3_b3xD16yoVl2PO26)QoBx;Ap@z@?S<_6?m=<}eS{;uYStrS`>xz4U<BZvc<jW@y2S3wdsE39KPM)VVPu)vp;G*L^%`_xAL@^N%wA36kDH=kGFGKsttr9FAsyldQbW%d*5(EOjJc*(TR1GgwbB+q-UbJTeIh*|o6-i_0=UG=6XnndZCzRjSmPCMlQEN%rujb3{^HAdB&Gsi)k*F9P;sB5bX?)Wk22%y<=)}QQ(&PCg<(@(`Rx3HsXW?<g952#|&j260vo)syS+i5;WghLxQi_G#Vx6M#THe0uu7B7f`++T35xbP{D(x!46zV>OagvHcMotgf@Gn2r(v~!n8zoWF76^JSJ}UjQgW49?$DGjJFR(ZY%d>j-E&rp2#JM<5+*}^8>k+>`@BM7Tx&yO+x@Ub|i2Zpf#ORQVrWcY)`3f>f&7_HaBuvOEEAh-on@_0^k0UbFx1fC@uACb0BunkC(xx&7IX$wsat9>n5{aOn-`>sPCtmRGO3utUXE;Z0Pw=rCw&9#ojpP^Npy)aN(-rECn7FO=X@zW9#Nl|kVQb`WNIuQ`skvMn1Ju2w0Kz-B)h9A=mC@FHkuzY-Mh72dkQwTi9_xlN4eYQP)$yU!$&M#RvA(`GcSywh!JbwA&D*5JL>$370hhe2-@Aaf81?{<gMk`J>ZZRhPMudNW$BE3f(-G4u&HYTM=zUVExTb9E`#?v`BQ=4nfz>KqY(y`0@uD#zqk`*HY(&AdSCF{XhHb6pIE?qYz7tThqUTDjr<1Pdci_5{mP^njHVn^Qh6z^3`;(8z2pUJgv`et>sKKnmy{7Szkw`T`@<u*skSRYxIl)b$KE-S(jhn|KTgp&bK?CyHm>dBxyh>JR3JL=Crb;zJD9dm>m854dpepzgwjffJ)}w4lh}-!y4CP94omEE5sS^|TRL-%3aN{HX2xngy+bd4$E_V(BLsfR5Y-0Ymb>6zX)o~U2`>^{hn0ZHabIZ^Alvr*R@U_MD(QViM$Qc}87KP*cA%2i<ixqo>;H`RZXG2d19+g~ciubcXJf2Q$Zq5Pg3#HaM7HY%tTPjm@3GWX{+(HQLAe;zydRZ6`&<>AY1B9ftgmLFPIrDN7~61`wx@=4(D12#j(#K+O~8c(KxNTlZx|VuIAw<{9+Zgnp^~%H6(ZBcEimZvXB&ZYZ)f0}qQG!~L5S}(fQFcHKB|IN>$8~8s8QyPhdqTqCawRI4h_WrZm~V?FPB8AV&LTZ!wluR6$}a|mlB6HUB$yRTo%jKOf=ZU4sV8uZEDZE<JyuDLXlGQG0se3D9!Ie{)x}pkL0=J1RY^E1p}*%6A;LBh!mGiWcbeX4v*?a(xK_kaVZ$I5V~S(=niVVjo`y<uLjL$Bc7dp4rmJtembD>ByBaQEQIa8RR%;}qm|7v%IW|4)f@dMyRNOFkx>ipVfw|xgKm1K?PK`eL!p(mB|uoQ<jdlNPR(MX-*7ZYf{kUx5SJ*UK;KYu%{8%+z;G-lA4leRTx5~~(Z{+@lT_^HnZ&f+_H&l<W$Vdf<?AX&wZEp};2F7bCq3Y*v_%t7Z<#ca(8bjWa!=T!1FAGI4FQHtl`l`-9XX`LyJhZ;0`CaIVxj>R1$1?Oy#rY%@A#7W3y}xCdweXoSQfdeSAgDEMgSZ&)|(CeU@;I;BKL$aWif!Ctr(zZX&lW*#kGQmu8Er5a1KCX4b<6q*TC}i&(Rvo&(0f#<7%|IaI2orj=ZF3F%)b6@-fod^Oo6viCr?A;DO}naHS(l{^2q|{{$z_-x$RPN3yT1a4~l}tGTojdn0443X(u35oW&l{%92Q`-yM%wbCV@pVv~Wjh8apO3NATOzGQLfOD2%E6A1OsE!Yay}m^*Ij#&$+rnY*2wtP{xhzX^&gv=XZZsC&r$O)mL%n>=rsvPzXkfxWSW=cxX3R~69yS7vNRdZh-GFUzC*BoFLW=9w&!^`;?qh8(b@6_;Eg(~2`g*SQ266G?t8Lv%R2`S`Q}RUaU|=vO=I|xqt6vPFX*6+HT2J=k52*Yp-h~Gb_HNz|^Wv0aF&@)G2Hf%#RlF9(q3espJ7&{H4Px~yf$*vCfcGP8_4EmDBWfpYXMKl24@@0~dl>YrKRGWy*kB|QCtg#1QS3P6KfZRxlr8OMgW9Wh1HqnfeBa-0RmN%pRQe6qtkzy;uavBD>zn(dfpC(DWq~M|oCB<=;vMhL+t+q4P;=I%j6>OUBHBLy!h_NeruQ)8c(Ok`xuJ977F2X$I0mNFURf#!O)3_JU8*~7?PM6$pc%A;=;&Fqj6%>en*b@5;<9V^296WzJg*%QWWqbR#hYhuRV|mNenS7=peeSk7k!kQKpBQ3Y683XBGC0U$<Z7bFJOKaD-fB;tvg>y%o2xk&|Gre66)C<+5Cx^jz)nc0@S35YkgBot#<*}UBjHN9_j=}?K#a}|2$fL`$f=soNc*n)2tZ|!c!sX;DIU3n0o#f=K|q@yt;6hvCh=ZKyOu(h`Bee$At|@K0ZRI=+8+1->4k`fxn8Fd1aW`9V=<}PA~MFrz`)_b<5-$1Q9MaW)%U+xT}+6AzN+QN)oM^LYOUzt#icFRD0)=fuJRZq2RI&ED~I)ZAtqEH>)6Mp4v&PRHIyAkdUD+J0Ts>*#r`pRbG&{CMdR>ZX+kdxS-@v`O9zh(^(R*nDoz{6bM3B@fazp<X<#G*g)2SzHhwmO>0H$k72+vJ$Tq38_5$ObOUfH!SqfZC>W<hbrQv2WOeE7nqHP+p(2~8E_?SRnch0E96$YQOk%rx;yv)Ys4bwrOi9x_>CQ7*p~7U4y%B;eK(Vcya&9aVq(0WN<Tn!I_tawo_F>=5pmZ&?D#Q|n;<j5CSl|}(hqPjzsAIbG|DvtNADNdtY0I(Uby&;!H_S0@gmwKre1h8tYXQsiLw`xIR}rGra%vl(bg1((3>=eXTp#)MWnZ7w3n1*>z=Zyd&sBm-Y>-#}c*)SJVw7MTAq^Wp#7nJKT-l|RH=`c&s^B7iB%1X&$MMTpTX$=WXMIsN!6%RkxSN~6ewZK(9wDC@ud)vRoO&$Sfnx;OTbRx;Dt=rs=9XsW|LtR@(s|*h*}APgr1mxpdJZp|h%NQx0a=CY@*`g-fLMbL53^@^55fCg_HLfUAx&;zm1ye(_XDJ%9uRRgM=qxFoDZHWtIkHjQ`BCCDFv{7k5Xn#fw~F5S?#uqA1PN2sh2+3T@DyQKBoeN7-271Cpbsq3^U;DB5*L^^fH;JN_uYr``hKXjSry&<N=I+cy-6|@k7_O6tDl~FUBnSgzHzKbxYVrjs2%NQO=m#=6E9e{Hs-~)N#+;504X`Ul5+HCuols^*ehBL~F-*?N*gWLYj#i;&nu>niQBK&CP{o#?g~;GZe&Z<(hj~H_Cp`GLY<)Dx@Vr{J@y{hmzsc6pjpI#uDa7D@41EOXgI2B})4jxL1UOO9NbHT)`_F8c%8*eBjS?#Wf8jCJbczO7U*pXRt51GTYmVmj<w_gEem<5td}|<>I{W8Zt*x;Th1KC7o1rG0x8^%ceWazzTx39>>lLJ;qOp#&+kFxX6H<t7HH86u%ym69sSnsRS-e7>BQ@?N6@>=a3At+tJk(?BsIlaIFmv_I&xFxl^z}pRy9RtC5f&?BviF<V6<JkQZqgAl{2XBj2|M)&1>?enHd!@@o0r7r-nh=EN!E4JbdEeg3Ts8v0jqkDn^*rR&`uGdc`fxg9uXV?4AnMPl5YGuHAJ8R9hQ71#m=LjlHcb%8NI>ZdLW4eZvH`|w@PHT)OMgc>{>H_b-W1ST4o%JSOEl|B0<!5p5&>Db<{HM$onFY*)zG!kqO|D+Qr75f2#v@go{nK`x)F}M}mFvb@kR6HNoHWrTG)wfU_FEXaeEr2sg90|4#|A4-oHJW}#T{t#x19fs$05SI9UH>r_1bsWz31v0IRnk75GS0t4&>lS9Y2a2Ai5N<rCE9*QWj!{pD@FC7#pDSk^>sMd><K&~l^6hV_+*ai5v>M-WPCgrC`0w>?FLE~;>|xv9$Xk>w<R%|s3u8hfv8R!@L?gZ{3Rh*gf$TwFZ}<CvNFUcc@4&O!?A_H^`<^U9;`Se5_J((R5imMaqCA4B|G&YKOe-s?J!-QE9@*D4lYFpP^2CK<u@6~B|$GMGp-;967T', c1='254235cfa0ebd882', c2='347e7e40281346f5'):
    try:

        if hashlib.sha256(data.encode()).hexdigest()[:16] != c1:
            raise ValueError('Primary integrity check failed')
            

        stage1 = base64.b85decode(data)
        if hashlib.blake2b(stage1).hexdigest()[:16] != c2:
            raise ValueError('Secondary integrity check failed')
            
        stage2 = custom_decode(stage1)
        stage3 = zlib.decompress(stage2)
        return marshal.loads(stage3)
    except Exception as e:
        raise RuntimeError(f'Decryption failed: {str(e)}')


exec(decrypt())
